$:.unshift File.join(File.dirname(__FILE__), "..", "lib")
require "small_eigen_collider"

raise "Read the README, and understand this can harm your computer." unless File.exist?("i_understand_the_risks.txt")

$VERBOSE = nil

def determine_output_filename
  # FIXME be able to include the ruby implementation's version
  # FIXME should the output filename be chosen by the program like this?
  ruby_engine = defined?(RUBY_ENGINE) ? RUBY_ENGINE : "unknown_engine"
  output_filename = [ruby_engine, RUBY_VERSION, RUBY_PATCHLEVEL, "output.txt"].join("_")
  output_filename
end

runner_configurations = YAML.load_file("config/runner.yml")
list_filtering_configuration = runner_configurations.fetch(:list_filtering)
list_generation_configuration = runner_configurations.fetch(:list_generation)

Timeout.timeout(list_generation_configuration.fetch(:timeout), TaskListTimeout) do
  if File.exist?(list_filtering_configuration.fetch(:output_yaml_filename))
    task_list = SmallEigenCollider::TaskList.new_using_yaml(list_filtering_configuration.fetch(:output_yaml_filename))
    task_list.run_and_log_each_task(determine_output_filename)
  elsif File.exist?(list_filtering_configuration.fetch(:input_yaml_filename))
    # This should only happen if you created an unfiltered task list, and then it crashed
    # and you're trying to re-run it
    task_list = SmallEigenCollider::TaskList.new_using_yaml(list_filtering_configuration.fetch(:input_yaml_filename))
    list_filtering_configuration.fetch(:filters).each do |filter|
      task_list.add_filter(filter)
    end
    task_list.run_and_log_each_task(determine_output_filename)
    task_list.dump_tasks_to_yaml(list_filtering_configuration.fetch(:output_yaml_filename))
  else
    unfiltered_task_list = SmallEigenCollider::TaskList.new_using_creator(list_generation_configuration.fetch(:seed), list_generation_configuration.fetch(:iterations))
    unfiltered_task_list.dump_tasks_to_yaml(list_generation_configuration.fetch(:output_yaml_filename))

    task_list = SmallEigenCollider::TaskList.new_using_yaml(list_generation_configuration.fetch(:output_yaml_filename))
    list_filtering_configuration.fetch(:filters).each do |filter|
      task_list.add_filter(filter)
    end
    task_list.run_and_log_each_task(determine_output_filename)
    task_list.dump_tasks_to_yaml(list_filtering_configuration.fetch(:output_yaml_filename))
  end
end
